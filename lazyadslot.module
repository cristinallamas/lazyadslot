<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_context_registry().
 */
function lazyadslot_context_registry() {
  return [
    'reactions' => [
      'lazyadslot' => [
        'title' => t('Lazy Loading Ad Slots'),
        'plugin' => 'lazyadslot_context_reaction',
      ],
    ],
  ];
}

/**
 * Implements hook_context_plugins().
 */
function lazyadslot_context_plugins() {
  $plugins['lazyadslot_context_reaction'] = [
    'handler' => [
      'path' => drupal_get_path('module', 'lazyadslot') . '/plugins',
      'file' => 'lazyadslot_context_reaction.inc',
      'class' => 'LazyLoadAdSlotContextReaction',
      'parent' => 'context_condition',
    ],
  ];
  return $plugins;
}

/**
 * Implements hook_page_build().
 *
 * Get all needed settings and add it to the JavaScript which will append
 * the rendered dfp tag in specified location.
 * All the visibility rules should be controlled by the context.
 */
function lazyadslot_page_build(&$page) {

  $lazyadslot_tags = [];

  // Execute lazyadslot plugin.
  if ($plugin = context_get_plugin('reaction', 'lazyadslot')) {
    $plugin->execute();

    // Missing configuration.
    if (empty($plugin->lazyadslot_tags)) {
      return;
    }

    foreach ($plugin->lazyadslot_tags as $key => $values) {
      // Load the DFP tag.
      $tag = dfp_tag_load($values['ad_tag']);

      // Disabled tag.
      if (!empty($tag->disabled)) {
        continue;
      }

      // Process the tag.
      $dfp_tag = dfp_tag($values['ad_tag']);
      $lazyadslot_tags[$key] = $values;

      // Arraying the selectors.
      $lazyadslot_tags[$key]['ad_placement'] = explode(PHP_EOL, $values['ad_placement']);

      // Render the tag.
      $lazyadslot_tags[$key]['renderedDfp'] = render($dfp_tag);

      // Remove the Slot definition added by DFP module
      // as we add our own replica of the definition.
      _lazyadslot_slot_to_remove($values['ad_tag']);

      // We are going to need it in case we want to generate
      // the same defined DFP in multiple places.
      $lazyadslot_tags[$key]['slotDefinition'] = _lazyload_dfp_js_slot_definition($tag);
    }

    // Add the javascript.
    _lazyadslot_add_js($lazyadslot_tags);
  }
}

/**
 * Cloned function from DFP module which excludes the drupal_add_js() step
 * and returns instead the generated JavaScript as a string.
 *
 * @param object $tag
 *    DFP Tag CTools object.
 * @return string $js
 *    DFP definition as JavaScript.
 */
function _lazyload_dfp_js_slot_definition($tag) {
  // Add the js needed to define this adSlot to <head>.
  $js = '';
  // Start by defining breakpoints for this ad.
  if (!empty($tag->breakpoints)) {
    $breakpoints = $tag->breakpoints;
    $js .= 'var mapping = googletag.sizeMapping()' . "\n";
    foreach ($breakpoints as $breakpoint) {
      $js .= '  .addSize(' . dfp_format_size($breakpoint['browser_size']) . ', ' . dfp_format_size($breakpoint['ad_sizes']) . ')' . "\n";
    }
    $js .= '  .build();' . "\n";
  }
  if (!empty($tag->settings['out_of_page'])) {
    $js .= 'googletag.slots["' . $tag->machinename . '"] = googletag.defineOutOfPageSlot("' . $tag->adunit . '", "' . $tag->placeholder_id . '")' . "\n";
  }
  else {
    $js .= 'googletag.slots["' . $tag->machinename . '"] = googletag.defineSlot("' . $tag->adunit . '", ' . $tag->size . ', "' . $tag->placeholder_id . '")' . "\n";
  }
  $click_url = variable_get('dfp_click_url', '');
  if (!empty($click_url)) {
    if (!preg_match("/^https?:\/\//", $click_url)) {
      // relative URL; prepend site domain
      $click_url = (($GLOBALS['is_https']) ? 'https://' : 'http://') . $_SERVER['HTTP_HOST'] . "/" . $click_url;
    }
    $js .= '  .setClickUrl("' . $click_url . '")' . "\n";
  }
  $js .= '  .addService(googletag.pubads())' . "\n";

  if (!empty($tag->adsense_ad_types)) {
    $js .= '  .set("adsense_ad_types", "' . $tag->adsense_ad_types . '")' . "\n";
  }
  if (!empty($tag->adsense_channel_ids)) {
    $js .= '  .set("adsense_channel_ids", "' . $tag->adsense_channel_ids . '")' . "\n";
  }
  foreach ($tag->adsense_colors as $key => $val) {
    if (!empty($val)) {
      $key = 'adsense_' . $key . '_color';
      $val = '#' . drupal_strtoupper($val);
      $js .= '  .set("' . $key . '", "' . $val . '")' . "\n";
    }
  }
  $targeting = dfp_format_targeting($tag->targeting, $tag);
  foreach ($targeting as $target) {
    $js .= '  .setTargeting(' . $target['target'] . ', ' . $target['value'] . ')' . "\n";
  }
  // Apply size mapping when there are breakpoints.
  if (!empty($tag->breakpoints)) {
    $js .= '  .defineSizeMapping(mapping)' . "\n";
  }
  $js = rtrim($js, "\n") . ';';

  return $js;
}

/**
 * Helper to add the javascript code for Taboola DFP Native.
 */
function _lazyadslot_add_js($tags) {
  if (empty($tags)) {
    return;
  }

  // Add collected JS configuration.
  drupal_add_js([
    'lazyAdSlot' => [
      'tags' => $tags,
    ],
  ], 'setting');

  // Load the library.
  drupal_add_js(drupal_get_path('module', 'lazyadslot') . '/js/lazyadslot.js');
  // The usage.
  drupal_add_js(drupal_get_path('module', 'lazyadslot') . '/js/lazyadslot_init.js');
}

/**
 * Helper to statically store the slot to be removed in hook_js_alter().
 *
 * @param string $ad_slot_machinename
 *    String The machine name of the slot.
 * @return string $machinename
 */
function _lazyadslot_slot_to_remove($ad_slot_machinename = NULL) {
  $machinename = &drupal_static(__FUNCTION__, FALSE);
  if (!empty($ad_slot_machinename)) {
    $machinename = $ad_slot_machinename;
  }
  return $machinename;
}

/**
 * Implements hook_js_alter().
 *
 * Remove unneeded defined DFP slot.
 */
function lazyadslot_js_alter(&$javascript) {
  $ad_slot_machinename = _lazyadslot_slot_to_remove();

  // Iterate of all javascript items to get dfp slots.
  foreach ($javascript as $key => $value) {
    if (isset($value['data']) && !is_array($value['data']) && strstr($value['data'], 'googletag')) {
      if (preg_match('/' . 'googletag\.slots\[\"' . $ad_slot_machinename . '\"\]\s*=\s*googletag\.define[^\(]*?Slot\(' . '/', $value['data'])) {
        unset($javascript[$key]);
        return;
      }
    }
  }
}
