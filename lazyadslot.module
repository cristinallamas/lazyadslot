<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_context_registry().
 */
function lazyadslot_context_registry() {
  return [
    'reactions' => [
      'lazyadslot' => [
        'title' => t('Lazy Loading Ad Slots'),
        'plugin' => 'lazyadslot_context_reaction',
      ],
    ],
  ];
}

/**
 * Implements hook_context_plugins().
 */
function lazyadslot_context_plugins() {
  $plugins['lazyadslot_context_reaction'] = [
    'handler' => [
      'path' => drupal_get_path('module', 'lazyadslot') . '/plugins',
      'file' => 'lazyadslot_context_reaction.inc',
      'class' => 'LazyLoadAdSlotContextReaction',
      'parent' => 'context_condition',
    ],
  ];
  return $plugins;
}

/**
 * Implements hook_page_build().
 *
 * Get all needed settings and add it to the JavaScript which will append
 * the rendered dfp tag in specified location.
 * All the visibility rules should be controlled by the context.
 */
function lazyadslot_page_build() {

  $tags = [];

  // Execute lazyadslot plugin.
  if ($plugin = context_get_plugin('reaction', 'lazyadslot')) {
    $plugin->execute();

    foreach ($plugin->lazyadslot_tags as $key => $values) {

      $ad_tag = $values['ad_tag'];

      // Load the DFP tag.
      $tag = dfp_tag_load($ad_tag);

      // Check for existence.
      if (empty($tag)) {
        drupal_set_message(t('Invalid dfp tag: %name', ['%name' => $ad_tag]), 'error');
        continue;
      }

      // Disabled tag.
      if (!empty($tag->disabled)) {
        continue;
      }

      // Process the tag.
      $dfp_tag = dfp_tag($ad_tag);
      $tags[$key] = $values;

      // Get the slot Display.
      $slotDisplay = render($dfp_tag);

      // Store the slot to be removed later in hook_js_alter().
      _lazyadslot_slots_to_remove($ad_tag);

      // Get the slot declaration.
      $slotDeclaration = _lazyload_get_slot_declaration($ad_tag);

      // The Ad can't be created if the declaration is not detected.
      if (empty($slotDeclaration)) {
        continue;
      }

      // Remove "initial ad load" configuration
      // as we are going to handle when the load is going to be loaded.
      if (variable_get('dfp_disable_init_load', 1)) {
        $slotDeclaration = str_ireplace('googletag.pubads().disableInitialLoad();', '', $slotDeclaration);
      }

      // Wrap the slot Declaration and Display
      // to be handled asynchronously if is setup so.
      if (!empty($values['async_rendering'])) {
        if (strpos($slotDeclaration, 'googletag.cmd.push') === FALSE) {
          $slotDeclaration = 'googletag.cmd.push(function() {' . PHP_EOL . $slotDeclaration . PHP_EOL . '});';
        }

        if (strpos($slotDisplay, 'googletag.cmd.push') === FALSE) {
          $slotDisplay = preg_replace('/googletag\.display\(\".*\"\)\;$/m', 'googletag.cmd.push(function() {' . PHP_EOL . '$0' . PHP_EOL . '});', $slotDisplay);
        }
      }

      // Arraying the selectors.
      $tags[$key]['ad_placement'] = explode(PHP_EOL, $values['ad_placement']);

      // All Ad needed markup.
      $tags[$key]['renderedDfp'] = '<script>' . PHP_EOL . $slotDeclaration . PHP_EOL . '</script>' . PHP_EOL . $slotDisplay;

      // Refresh on load.
      $tags[$key]['refreshOnLoad'] = variable_get('dfp_disable_init_load', 1);
    }

    // Allow modules to alter the final tags.
    drupal_alter('lazyadslot_tags', $tags);

    // Add the javascript.
    _lazyadslot_add_js($tags);
  }
}

/**
 * Helper to retrieve added js for given ad_tag slot.
 *
 * @param string $ad_tag
 *   DFP slot machinename
 * @return string
 *   JavaScript code
 */
function _lazyload_get_slot_declaration($ad_tag) {
  foreach (drupal_add_js() as $key => $value) {
    if (isset($value['data']) && !is_array($value['data']) && strstr($value['data'], 'googletag')) {
      if (preg_match('/' . 'googletag\.slots\[\"' . $ad_tag . '\"\]\s*=\s*googletag\.define[^\(]*?Slot\(' . '/', $value['data'])) {
        return $value['data'];
      }
    }
  }
}

/**
 * Helper to add the javascript code for Taboola DFP Native.
 */
function _lazyadslot_add_js($tags) {
  // Always load the library.
  drupal_add_js(drupal_get_path('module', 'lazyadslot') . '/js/lazyadslot.js');

  // Add collected JS configuration.
  if (!empty($tags)) {
    drupal_add_js([
      'lazyAdSlot' => [
        'tags' => $tags,
      ],
    ], 'setting');

    // The usage.
    drupal_add_js(drupal_get_path('module', 'lazyadslot') . '/js/lazyadslot_init.js');
  }
}

/**
 * Helper to statically store the slot in order to be removed in hook_js_alter().
 *
 * @param string $ad_tag
 *   The machine name of the slot.
 * @return string $machinename
 */
function _lazyadslot_slots_to_remove($ad_tag = NULL) {
  $machinenames = &drupal_static(__FUNCTION__, array());
  if (!empty($ad_tag)) {
    $machinenames[] = $ad_tag;
  }
  return $machinenames;
}

/**
 * Implements hook_js_alter().
 *
 * Remove unneeded declared DFP slot.
 */
function lazyadslot_js_alter(&$javascript) {
  // Return if there are no ad tags to remove.
  if (!$ad_tags = _lazyadslot_slots_to_remove()) {
    return;
  }
  // Iterate of all javascript items to get dfp slots.
  foreach ($javascript as $key => $value) {
    if (isset($value['data']) && !is_array($value['data']) && strstr($value['data'], 'googletag')) {
      foreach ($ad_tags as $ad_tag) {
        if (preg_match('/' . 'googletag\.slots\[\"' . $ad_tag . '\"\]\s*=\s*googletag\.define[^\(]*?Slot\(' . '/', $value['data'])) {
          unset($javascript[$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function lazyadslot_module_implements_alter(&$implementations, $hook) {
  // Ensure that lazyadslot runs after dfp and context.
  if (in_array($hook, ['page_build', 'js_alter'])) {
    $module = ['lazyadslot' => $implementations['lazyadslot']];
    unset($implementations['lazyadslot']);
    $implementations = $implementations + $module;
  }
}
